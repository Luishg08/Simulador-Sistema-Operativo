/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.awt.Dimension;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luish
 */
public class SistemaOperativo extends javax.swing.JFrame {
    Programa programa = new Programa();
    LinkedList<String> variables; //lista para las variables, esta tendrá el número del archivo al que pertenece y se usará para mostrarlas
    LinkedList<String> etiquetas; //lista para las etiquetas, cada etiqueta tendrá su número del archivo al que pertenece y la posición
    LinkedList<String> lineasejecutar; //lista para almacenar las lineas que se deben ejecutar después de la revisión de sintaxis
    LinkedList<String> variablessolonumero; //lista para almacenar solo los números de variable y colocarlas en la memoria 
    int contadordeArchivos; //numero para saber cuántos archivos hemos metido y para colocarles su respectivo identificador
    int memoriaocupada; //debemos saber la memoria ocupada para después tomar en cuenta las variables declaradas si tienen el mismo nombre
    int currentIndex = 0; /* Índice de la línea actual en la lista de lineas a ejecutar (sirve para los vaya o vayasi
                              Si cambio este index, la ejecución empezará a partir de la instrucción que le diga*/
    Timer timer; // Timer para mostrar las instrucciones
    int currentIndex1 = 0;
    Timer timer1;
    LinkedList<String> variablesConNombreeIdentificadorArchivo; //sirve para los case de ejecutar archivos, ayudan a cambiar y tomar variables
    LinkedList<String> etiquetasconNombreeIdentificadorArchivo; //sirve para identificar de qué archivos son las etiquetas
    private AtomicBoolean isRunning = new AtomicBoolean(true);
    LinkedList<String> archivosPrioridad;
    LinkedList<String> archivosTiempo;
    private boolean modoPasoAPaso = false;
    private Queue<String> colaInstrucciones = new LinkedList<>(); // Cola para las instrucciones
    int contadorArchivos = 0;
    
    
    /**
     * Creates new form SistemaOperativo
     */
    public SistemaOperativo() {
        initComponents();
        this.spinQuantum.setValue(5);
        this.btnEjecutararchivos.setEnabled(false);
        OrganizarEspacioMemoria();
        this.spinEspacioMemoria.setValue(500);
        this.spinMemoriaKernel.setValue(17);
        this.variables = new LinkedList<>();
        this.etiquetas = new LinkedList<>();
        this.lineasejecutar = new LinkedList<>();
        this.variablessolonumero = new LinkedList<>();
        this.variablesConNombreeIdentificadorArchivo = new LinkedList<>();
        this.etiquetasconNombreeIdentificadorArchivo=new LinkedList<>();
        this.archivosPrioridad = new LinkedList<>();
        this.archivosTiempo = new LinkedList<>();
        this.txVariables.setText("POS  Variables\n");
        this.txetiquetas.setText("POS  Etiquetas\n");
        this.txArchivos.setText("ID       PROGRAMA         #INS RB RLC RLP\n");
        this.contadordeArchivos = 0;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnseleccionararchivo = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        spinEspacioMemoria = new javax.swing.JSpinner();
        spinMemoriaKernel = new javax.swing.JSpinner();
        btnAceptarespaciomemoria = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEspacioMemoria = new javax.swing.JTable();
        Instrucciones = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txArchivo = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txErrores = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txVariables = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txArchivos = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        txetiquetas = new javax.swing.JTextArea();
        lblModo = new javax.swing.JLabel();
        btnEjecutararchivos = new javax.swing.JButton();
        lblArchivoejecutando = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        txtAcumulador = new javax.swing.JTextField();
        txInstruccionejecutada = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txPantalla = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        txImpresora = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btnPausar = new javax.swing.JButton();
        btnPasoaPaso = new javax.swing.JButton();
        lblPausa = new javax.swing.JLabel();
        btnCrearArchivo = new javax.swing.JButton();
        btnEditarArchivo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblPausa2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        comboPlanificación = new javax.swing.JComboBox<>();
        spinQuantum = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 6, -1, -1));

        btnseleccionararchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/adjuntar.png"))); // NOI18N
        btnseleccionararchivo.setText("Adjuntar");
        btnseleccionararchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnseleccionararchivoActionPerformed(evt);
            }
        });
        jPanel2.add(btnseleccionararchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 480, 110, 40));

        jLabel6.setBackground(new java.awt.Color(51, 0, 102));
        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Seleccione el espacio Kernel");
        jLabel6.setToolTipText("");
        jLabel6.setAlignmentX(-10.0F);
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 160, 30));

        jLabel9.setBackground(new java.awt.Color(51, 0, 102));
        jLabel9.setFont(new java.awt.Font("Segoe UI Semibold", 0, 10)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Seleccione el espacio de memoria");
        jLabel9.setToolTipText("");
        jLabel9.setAlignmentX(-10.0F);
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 170, 30));
        jPanel2.add(spinEspacioMemoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 160, 30));
        jPanel2.add(spinMemoriaKernel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 160, 30));

        btnAceptarespaciomemoria.setBackground(new java.awt.Color(102, 255, 255));
        btnAceptarespaciomemoria.setText("Aceptar");
        btnAceptarespaciomemoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarespaciomemoriaActionPerformed(evt);
            }
        });
        jPanel2.add(btnAceptarespaciomemoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 70, 100, 30));

        tablaEspacioMemoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Contenido"
            }
        ));
        jScrollPane2.setViewportView(tablaEspacioMemoria);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 500, 670));

        txArchivo.setColumns(20);
        txArchivo.setRows(5);
        jScrollPane1.setViewportView(txArchivo);

        Instrucciones.addTab("Instrucciones", jScrollPane1);

        txErrores.setColumns(20);
        txErrores.setRows(5);
        jScrollPane3.setViewportView(txErrores);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        Instrucciones.addTab("Errores", jPanel4);

        jPanel2.add(Instrucciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 300, 420));

        txVariables.setColumns(20);
        txVariables.setRows(5);
        jScrollPane6.setViewportView(txVariables);

        jPanel2.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 190, 190));

        txArchivos.setColumns(20);
        txArchivos.setRows(5);
        jScrollPane4.setViewportView(txArchivos);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 630, 350, 60));

        txetiquetas.setColumns(20);
        txetiquetas.setRows(5);
        jScrollPane7.setViewportView(txetiquetas);

        jPanel2.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 480, 190, 190));

        lblModo.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblModo.setForeground(new java.awt.Color(153, 204, 255));
        lblModo.setText("MODO KERNEL");
        jPanel2.add(lblModo, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, -1));

        btnEjecutararchivos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ejecutar.png"))); // NOI18N
        btnEjecutararchivos.setText("Ejecutar");
        btnEjecutararchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutararchivosActionPerformed(evt);
            }
        });
        jPanel2.add(btnEjecutararchivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, -1, 40));

        lblArchivoejecutando.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jPanel2.add(lblArchivoejecutando, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 190, 30));

        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField1.setText("ACUMULADOR");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        txtAcumulador.setEditable(false);
        txtAcumulador.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtAcumulador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAcumuladorActionPerformed(evt);
            }
        });
        jPanel2.add(txtAcumulador, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 200, 50));

        txInstruccionejecutada.setFont(new java.awt.Font("Rockwell Condensed", 1, 12)); // NOI18N
        jPanel2.add(txInstruccionejecutada, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 130, 230, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/consola.png"))); // NOI18N
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 480, 210));

        txPantalla.setColumns(20);
        txPantalla.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        txPantalla.setRows(5);
        txPantalla.setDoubleBuffered(true);
        txPantalla.setDragEnabled(true);
        jScrollPane5.setViewportView(txPantalla);

        jPanel2.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 220, 120));

        txImpresora.setColumns(20);
        txImpresora.setRows(5);
        jScrollPane8.setViewportView(txImpresora);

        jPanel2.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 480, 220, 130));
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 300, -1, 280));

        btnPausar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pausa.png"))); // NOI18N
        btnPausar.setText("Pausa");
        btnPausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPausarActionPerformed(evt);
            }
        });
        jPanel2.add(btnPausar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 360, 130, 50));

        btnPasoaPaso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pasoapaso.png"))); // NOI18N
        btnPasoaPaso.setText("paso a paso");
        btnPasoaPaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasoaPasoActionPerformed(evt);
            }
        });
        jPanel2.add(btnPasoaPaso, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 300, 210, 60));

        lblPausa.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jPanel2.add(lblPausa, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 300, 110, 60));

        btnCrearArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crear.png"))); // NOI18N
        btnCrearArchivo.setText("crear");
        btnCrearArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearArchivoActionPerformed(evt);
            }
        });
        jPanel2.add(btnCrearArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 420, 120, 50));

        btnEditarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/editar.png"))); // NOI18N
        btnEditarArchivo.setText("Editar");
        btnEditarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarArchivoActionPerformed(evt);
            }
        });
        jPanel2.add(btnEditarArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 580, 110, 40));
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 370, 270, -1));

        lblPausa2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblPausa2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/impresora.png"))); // NOI18N
        jPanel2.add(lblPausa2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 260, 290));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/computador.png"))); // NOI18N
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, -40, -1, -1));

        comboPlanificación.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Algoritmo de Planificación (Modo de ejecución)", "FCFS (Primero en llegar, primero en ser atendido)", "SJF (Tiempo más corto, primero en ser atendido) Expropiativo", "SJF (Tiempo más corto, primero en ser atendido) No expropiativo", "Planificación por prioridad (Seleccionar número de prioridad) Expropiativo UNIX", "Planificación por prioridad (Seleccionar número de prioridad) No Expropiativo UNIX", "RR (Cada proceso será atendido por un lapso de tiempo y se irá a la cola)" }));
        comboPlanificación.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPlanificaciónActionPerformed(evt);
            }
        });
        jPanel2.add(comboPlanificación, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 500, -1));
        jPanel2.add(spinQuantum, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 70, -1));

        jLabel4.setText("Quantum");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 250, 50, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1985, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2461, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(465, 465, 465))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(756, 756, 756))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void OrganizarAlgoritmoDePlanificacion(){
        LinkedList<String> listaAuxiliar = new LinkedList<>();
        switch((String)this.comboPlanificación.getSelectedItem()){
             case "Planificación por prioridad (Seleccionar número de prioridad) No Expropiativo UNIX":
                    boolean condicion = false;
                    while (!condicion){
                        condicion = true;
                        for (int i = this.currentIndex; i < this.archivosPrioridad.size()-1; i++) {
                            String[] prioridadporPartes = this.archivosPrioridad.get(i).trim().split("\\s");
                            String[] prioridadporPartes1 = this.archivosPrioridad.get(i+1).trim().split("\\s");
                            if (Integer.parseInt(prioridadporPartes[1]) > Integer.parseInt(prioridadporPartes1[1])){
                                String aux = this.archivosPrioridad.get(i);
                                this.archivosPrioridad.set(i, this.archivosPrioridad.get(i+1));
                                this.archivosPrioridad.set(i+1,aux);
                                condicion = false;
                            }
                        }
                    }
                for(String prioridad:this.archivosPrioridad){
                        for (int j = 0; j < this.lineasejecutar.size()-1; j++) {
                            String[] prioridadPorPartes = prioridad.trim().split("\\s");
                            String[] lineaPorPartes = this.lineasejecutar.get(j).trim().split("\\s");
                            if(lineaPorPartes[2].equals(prioridadPorPartes[0])){
                                listaAuxiliar.add(this.lineasejecutar.get(j));
                            }
                        } 
                }
                this.lineasejecutar.clear();
                this.lineasejecutar.addAll(listaAuxiliar);
                break;
            case "SJF (Tiempo más corto, primero en ser atendido) No expropiativo":
                boolean condicion4 = false;
                    while (!condicion4){
                        condicion4 = true;
                        for (int i = this.currentIndex; i < this.archivosTiempo.size()-1; i++) {
                            String[] prioridadporPartes = this.archivosTiempo.get(i).trim().split("\\s");
                            String[] prioridadporPartes1 = this.archivosTiempo.get(i+1).trim().split("\\s");
                            if (Integer.parseInt(prioridadporPartes[1]) > Integer.parseInt(prioridadporPartes1[1])){
                                String aux = this.archivosTiempo.get(i);
                                this.archivosTiempo.set(i, this.archivosTiempo.get(i+1));
                                this.archivosTiempo.set(i+1,aux);
                                condicion4 = false;
                            }
                        }
                    }
                for(String tiempo:this.archivosTiempo){
                        for (int j = 0; j < this.lineasejecutar.size(); j++) {
                            String[] prioridadPorPartes = tiempo.trim().split("\\s");
                            String[] lineaPorPartes = this.lineasejecutar.get(j).trim().split("\\s");
                            if(lineaPorPartes[2].equals(prioridadPorPartes[0])){
                                listaAuxiliar.add(this.lineasejecutar.get(j));
                            }
                        } 
                }
                this.lineasejecutar.clear();
                this.lineasejecutar.addAll(listaAuxiliar);
                break;
            case "SJF (Tiempo más corto, primero en ser atendido) Expropiativo":
                boolean condicion3 = false;
                    while (!condicion3){
                        condicion3 = true;
                        for (int i = currentIndex; i < this.archivosTiempo.size()-1; i++) {
                            String[] prioridadporPartes = this.archivosTiempo.get(i).trim().split("\\s");
                            String[] prioridadporPartes1 = this.archivosTiempo.get(i+1).trim().split("\\s");
                            if (Integer.parseInt(prioridadporPartes[1]) > Integer.parseInt(prioridadporPartes1[1])){
                                String aux = this.archivosTiempo.get(i);
                                this.archivosTiempo.set(i, this.archivosTiempo.get(i+1));
                                this.archivosTiempo.set(i+1,aux);
                                condicion3 = false;
                            }
                        }
                    }
                for(String tiempo:this.archivosTiempo){
                        for (int j = 0; j < this.lineasejecutar.size(); j++) {
                            String[] prioridadPorPartes = tiempo.trim().split("\\s");
                            String[] lineaPorPartes = this.lineasejecutar.get(j).trim().split("\\s");
                            if(lineaPorPartes[2].equals(prioridadPorPartes[0])){
                                listaAuxiliar.add(this.lineasejecutar.get(j));
                            }
                        } 
                }
                this.lineasejecutar.clear();
                this.lineasejecutar.addAll(listaAuxiliar);
                break;
            case "RR (Cada proceso será atendido por un lapso de tiempo y se irá a la cola)":
                int quantum = (int) this.spinQuantum.getValue();

                // Crear objetos Archivo y organizar las instrucciones
                for (String archivo : this.archivosTiempo) {
                    String[] archivoporpartes = archivo.trim().split("\\s");
                    Archivo nuevoArchivo = new Archivo(archivoporpartes[0]);

                    // Verificar si el archivo ya existe en programa.getMisArchivos()
                    boolean archivoExistente = false;
                    for (Archivo arch : programa.getMisArchivos()) {
                        if (arch.getIdentificador().equals(nuevoArchivo.getIdentificador())) {
                            archivoExistente = true;
                            break;
                        }
                    }

                    // Si el archivo no existe, agregarlo y organizar sus instrucciones
                    if (!archivoExistente) {
                        programa.getMisArchivos().add(nuevoArchivo);
                        for (String linea : this.lineasejecutar) {
                            String[] lineaporpartes = linea.trim().split("\\s");
                            if (lineaporpartes[2].equals(archivoporpartes[0])) {
                                nuevoArchivo.getMislineas().add(linea);
                            }
                        }
                    }
                }

                int contadorlinea = 0;

                // Iterar hasta que se recorran todas las instrucciones de todos los archivos
                while (true) {
                    boolean algunaInstruccionAgregada = false;

                    // Iterar sobre cada archivo y agregar las próximas instrucciones según el quantum
                    for (int j = contadorArchivos; j < programa.getMisArchivos().size(); j++) {
                        int totalInstrucciones = programa.getMisArchivos().get(j).getMislineas().size();
                        for (int i = contadorlinea; i < contadorlinea + quantum && i < totalInstrucciones; i++) {
                            listaAuxiliar.add(programa.getMisArchivos().get(j).getMislineas().get(i));
                            algunaInstruccionAgregada = true;
                        }
                    }

                    // Si no se agregó ninguna instrucción en esta iteración, salir del bucle
                    if (!algunaInstruccionAgregada) {
                        break;
                    }

                    // Incrementar el contador de línea para la próxima iteración
                    contadorlinea += quantum;
                }

                // Actualizar las instrucciones a ejecutar con las instrucciones organizadas
                this.lineasejecutar.clear();
                this.lineasejecutar.addAll(listaAuxiliar);
                this.contadorArchivos = programa.getMisArchivos().size();
                currentIndex = 0;
                break;
                
        }
    }
    
    public void memoriaOcupada(){
        DefaultTableModel modeloTabla = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
        int contador = 0;
        while(modeloTabla.getValueAt(contador, 1)!=null){
            contador++;
        }
        this.memoriaocupada = contador;
    }
    
    String errores = ""; //creo un string para adjuntarlo al textArea de los errores
    private boolean examinarSintaxis(String linea, int contadorLinea, String archivo){ //el método recibe una línea y le hace la revisión
        String[] palabras = linea.trim().split("\\s"); //separo por palabras la frase y las meto en un arreglo
        String[] instrucciones = {"cargue","almacene","nueva","lea","sume","reste","multiplique","divida","potencia","modulo","concatene","elimine","extraiga","Y","O","NO","muestre","imprima","vaya","vayasi","etiqueta","retorne","dinosaurio"};
        //la línea de arriba contiene un vector con las palabras que siempre deben ir en la primera posición
        boolean instruccionCorrecta = false;
        boolean sintaxisCorrecta = true;
        palabras = Arrays.stream(palabras).filter(palabra -> !palabra.isEmpty()).toArray(String[]::new); //elimino espacios de más entre palabras
        if (linea.trim().startsWith("//")) {
        return true; // No se considera un error
        }
        if (palabras.length == 0) {
        errores += "Advertencia: No se encontró contenido en la línea " + contadorLinea + " " + archivo + "\n";
        sintaxisCorrecta = true; // No es un error, solo una advertencia
        txErrores.setText(errores);
        return sintaxisCorrecta;
        }
        if(palabras.length>1){
            for(String i:instrucciones){ //recorro el vector que contiene las palabras de la frase 
                if(palabras[0].equals(i)){ //comparo con cada palabra de las instrucciones la primera palabra de la frase
                   instruccionCorrecta = true; //la instrucción es correcta si coincide con alguna de las del arreglo
                   if(palabras[1].equals("")){ //como toda línea debe tener por lo menos una instrucción y un operando, compruebo
                       errores+="Error: no se encuentra operando para la instrucción "+i+" linea "+contadorLinea+" "+archivo+"\n";
                       sintaxisCorrecta = false;
                   }
                   if(i.equalsIgnoreCase("nueva")){ //desde aquí se empiezan a tomar los casos de instrucciones que tienen más de un operando
                           boolean variableCorrecta = false; 
                           if (palabras.length < 3) {
                            errores += "Error: la instrucción 'nueva' requiere al menos 2 palabras adicionales, línea " + contadorLinea + " " + archivo + "\n";
                            sintaxisCorrecta = false;
                            }
                           else{
                           String[]tiposVariables = {"C","I","R","L"}; //guardo los tipos de variables en un arreglo
                           variableCorrecta = false;
                            for(String j:tiposVariables){ //recorro
                            if(palabras[2].equalsIgnoreCase(j)){
                                variableCorrecta = true;
                                if(j.equals("I")||j.equals("R")||j.equals("L")){ //si coincide el valor dado con el tipo variable 
                                    try {
                                        double prueba = Double.parseDouble(palabras[3]);
                                    } catch (Exception e) {
                                        if(palabras.length<4){
                                            errores+="la variable ha sido inicializada linea: "+contadorLinea+" "+archivo+"\n";
                                        }
                                        else{
                                            errores+="Error: el valor dado no coincide con la variable linea: "+contadorLinea+" "+archivo+"\n";
                                            sintaxisCorrecta = false;
                                        }
                                        
                                    }
                                }
                                else{
                                    sintaxisCorrecta = true;
                                }
                            }
                               }
                            }
                           
                            if(variableCorrecta==false){
                                errores+="Error: tipo de variable no reconocida linea "+contadorLinea+" "+archivo+"\n";
                                sintaxisCorrecta = false;
                            }
                       }
                       else if(i.equals("Y")||i.equals("O")||i.equals("NO")){
                            if(palabras.length>2){
                            if(palabras[2].equals("")){
                                errores+="Error: no se encuentra segundo operando para la instrucción "+i+" linea "+contadorLinea+" "+archivo+"\n";
                                sintaxisCorrecta = false;
                            }
                            else{
                                if(i.equals("Y")||i.equals("O")){
                                    if(palabras[3].equals("")){
                                         errores+="Error: no se encuentra tercer operando para la instrucción"+i+" linea "+contadorLinea+" "+archivo+"\n";
                                         sintaxisCorrecta = false;
                            }
                               }
                            }
                            }
                       }
                } 
            }
        }
            
        
        if (!instruccionCorrecta && !linea.trim().startsWith("retorne")) {
        errores += "Error: instrucción no identificada, línea " + contadorLinea + " " + archivo + "\n";
        sintaxisCorrecta = false;
        } else if (linea.trim().isEmpty()) {
        errores += "Advertencia: no se encontró contenido en la línea " + contadorLinea + " " + archivo + "\n";
        }
        if(linea.trim().startsWith("dinosaurio")){
            sintaxisCorrecta = true;
        }
        txErrores.setText(errores);
        return sintaxisCorrecta; /*la sintaxis correcta me retornará un true o false por cada línea, ese valor se toma en la función
                                   seleccionar archivo y comprobará si el archivo no tiene ningún error*/
            }
    private void ocuparMemoria(String linea, File archivo) {
    int memoriaKernel = (int) this.spinMemoriaKernel.getValue(); // obtengo el espacio Kernel seleccionado
    if (memoriaKernel == 0) { // si el número de espacio en memoria Kernel es igual a 0 (valor al iniciar el programa)
        memoriaKernel = 17; // Configuro el valor predeterminado de la memoria Kernel
    }
    String[] palabras = linea.trim().split("\\s+");
    palabras = Arrays.stream(palabras)
            .map(String::trim) // Eliminar espacios en blanco al principio y al final de cada palabra
            .filter(palabra -> !palabra.isEmpty())
            .toArray(String[]::new);
    if(palabras.length!=0){
    if (palabras[0].toLowerCase().equals("nueva")) {
        String valor = "";
        try { // intenta hallar el valor de la variable
            if(palabras[2].equalsIgnoreCase("C")){
                valor = String.join(" ", Arrays.copyOfRange(palabras, 3, palabras.length));
            }
            else{
                valor = palabras[3];
            } // El valor se encuentra en la cuarta palabra (índice 3)
            
        } catch (Exception e) { // si no hay inicialización entonces serán los valores por defecto según tipo de variable
            try {
                if (palabras[2].equals("I") || palabras[2].equals("R") || palabras[2].equals("L")) {
                    valor = "0";
                    
                } else {
                    valor = "‎ ";
                }
            } catch (Exception r) {
                System.out.println("Error: " + r);
            }
        }
        this.variables.add(palabras[1]+" : "+valor);
        this.variablessolonumero.add(valor);
    }
    else if(palabras[0].toLowerCase().equals("etiqueta")){
        String nombreetiqueta = palabras[1];
        String pos = palabras[2];
        try {
            int posicionlinea = Integer.parseInt(pos);
            if(posicionlinea>=1){
            FileReader fr = new FileReader (archivo); //variable de lector de archivo
            BufferedReader br = new BufferedReader(fr); //variable para mostrar donde queramos el texto del archivo
            String texto = "";
            int contadorLinea = 0;
            while(((linea = br.readLine())!=null&&contadorLinea<posicionlinea)){
                contadorLinea++;
            }
            if (contadorLinea == posicionlinea) {
                this.etiquetas.add("00"+(posicionlinea+(memoriaocupada-1))+"  "+"000"+(this.contadordeArchivos+1)+" "+palabras[1]+"\n");
            } else {
             JOptionPane.showMessageDialog(this, "No se encontró la línea correspondiente a la etiqueta " + nombreetiqueta);
            }
            
        }
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "No se pudo castear a int el tercer parámetro de la etiqueta "+pos+"\n"+e);
            System.out.println(e);
        }
    }
    int contador = 0; // inicializo un contador para recorrer las filas de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) tablaEspacioMemoria.getModel(); // convierto el modelo para obtener texto de fila
    while ((modeloTabla.getValueAt(contador, 1) != null)) {
        contador++;
    }
    String lineaFormateada = String.join(" ", palabras); //cambio la línea si esta tiene espacios de más
    modeloTabla.setValueAt(lineaFormateada, contador, 1);
    this.lineasejecutar.add("00"+contador+" "+archivo.getName()+" "+(this.contadordeArchivos+1)+" "+lineaFormateada);
    tablaEspacioMemoria.setModel(modeloTabla);
    }
}
    public void actualizarTablaVariables(int contador, String variable){
        String variables = txVariables.getText();
        variables +="00" +contador+"   "+"000"+(this.contadordeArchivos+1)+" "+variable+"\n";
        this.variablesConNombreeIdentificadorArchivo.add("00" +contador+" "+"000"+(this.contadordeArchivos+1)+" "+variable);
        txVariables.setText(variables);
    }
    public void actualizarTablaEtiquetas(String etiqueta){
        String etiquetas = txetiquetas.getText();
        etiquetas += etiqueta;
        this.etiquetasconNombreeIdentificadorArchivo.add(etiqueta);
        txetiquetas.setText(etiquetas);
    }
    
    private void btnseleccionararchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnseleccionararchivoActionPerformed
             if(timer!=null){
                timer.stop();
             }        
        if(!((String)this.comboPlanificación.getSelectedItem()).equals("Seleccione Algoritmo de Planificación (Modo de ejecución)")){      
            JFileChooser fc = new JFileChooser(); //Sirve para permitir al usuario seleccionar un archivo
            fc.showOpenDialog(null);//abrir el seleccionador de archivo sin ningun archivo seleccionado
            File archivo = fc.getSelectedFile(); //se instancia una variable tipo file y será igual al archivo seleccionado
            try {
                FileReader fr = new FileReader (archivo); //variable de lector de archivo
                BufferedReader br = new BufferedReader(fr); //variable para mostrar donde queramos el texto del archivo
                String texto = "";
                String linea = "";
                String nombreArchivo = archivo.getName();
                int contadorii = 0;
                DefaultTableModel modeloTablaii = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
                while((modeloTablaii.getValueAt(contadorii, 1)!=null)){ /*Si la fila que indica el contador tiene un texto
                                                                    es diferente de nada, entonces es porque hay algo
                                                                    y no puedo colocar la variable ahí*/
                    contadorii++; //aumento el contador para que pase a la siguiente fila
                }
                int contadorLinea = 0;
                int contadorErrores = 0; //inicializo una variable para contar los errores
            
                while(((linea = br.readLine())!=null)){ //si la línea leida tiene texto se le agregará a la variable texto
                    contadorLinea++;
                    texto+=linea+"\n";
                    boolean sintaxisCorrecta = examinarSintaxis(linea,contadorLinea,nombreArchivo);
                    if(sintaxisCorrecta ==false){
                        contadorErrores++; //como examino línea por línea si me retorna por lo menos un error se aumentará el contadorErrores
                    }
                }
                String textofinal = this.txArchivo.getText() + "A R C H I V O : "+archivo.getName()+"\n"+texto;
                this.txArchivo.setText(textofinal);
                JOptionPane.showMessageDialog(null, "Archivo leido correctamente");
                
                //OrganizarEspacioMemoria();
                if(contadorErrores==0){ //compruebo si hay por lo menos un error en el archivo
                        String linea1=""; //creo una nueva variable linea para no confundirla con la de arriba
                        FileReader fr1 = new FileReader (archivo); //creo un nuevo lector de documento
                        BufferedReader br1 = new BufferedReader(fr1); //creo nuevo extractor de texto
                        this.variables.removeAll(this.variables); //reinicio la lista a vacía para no confundir variables de otros archivos
                        this.variablessolonumero.removeAll(this.variablessolonumero);
                        this.etiquetas.removeAll(this.etiquetas);
                        memoriaOcupada();
                        while(((linea1 = br1.readLine())!=null)){ //si la línea leida tiene texto
                            ocuparMemoria(linea1,archivo); //le mando la línea a la función para que la agregue a la memoria
                            }
                        int contadoriiii = 0;
                        DefaultTableModel modeloTablaj = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
                         while((modeloTablaj.getValueAt(contadoriiii, 1)!=null)){ /*Si la fila que indica el contador tiene un texto
                                                                        es diferente de nada, entonces es porque hay algo
                                                                        y no puedo colocar la variable ahí*/
                            contadoriiii++; //aumento el contador para que pase a la siguiente fila
                            }
                        for(String variable:this.variables){
                        int contador = 0;
                        DefaultTableModel modeloTabla = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
                        while((modeloTabla.getValueAt(contador, 1)!=null)){ /*Si la fila que indica el contador tiene un texto
                                                                        es diferente de nada, entonces es porque hay algo
                                                                        y no puedo colocar la variable ahí*/
                            contador++; //aumento el contador para que pase a la siguiente fila
                            }
                        modeloTabla.setValueAt(variable, contador, 1); //pongo la variable en el espacio vacío
                        tablaEspacioMemoria.setModel(modeloTabla);

                        }
                        for(String variable:this.variables){
                            int contador = 0;
                        DefaultTableModel modeloTabla = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
                        memoriaOcupada();
                        while((!modeloTabla.getValueAt(memoriaocupada-1-contador, 1).equals(variable))){ /*Si la fila que indica el contador tiene un texto
                                                                        es diferente de nada, entonces es porque hay algo
                                                                        y no puedo colocar la variable ahí*/
                            contador++; //aumento el contador para que pase a la siguiente fila
                            }
                            actualizarTablaVariables(memoriaocupada-1-contador,variable);
                        }
                        for(String etiqueta:this.etiquetas){
                        actualizarTablaEtiquetas(etiqueta);
                        }
                        int contadoriii = 0;
                        while((modeloTablaii.getValueAt(contadoriii, 1)!=null)){ /*Si la fila que indica el contador tiene un texto
                                                                        es diferente de nada, entonces es porque hay algo
                                                                        y no puedo colocar la variable ahí*/
                            contadoriii++; //aumento el contador para que pase a la siguiente fila
                             }
                        String textotxAreaArchivo = this.txArchivos.getText();
                        this.contadordeArchivos +=1;
                        textotxAreaArchivo+="000"+this.contadordeArchivos+"   "+archivo.getName()+"______"+((contadoriii)-(contadorii))+"   "+contadorii+"   "+(contadoriiii-1)+"    "+(contadoriii-1)+"\n";
                        this.txArchivos.setText(textotxAreaArchivo);
                        if(((String)this.comboPlanificación.getSelectedItem()).equals("Planificación por prioridad (Seleccionar número de prioridad) No Expropiativo UNIX")){
                        String input = JOptionPane.showInputDialog("Por favor, ingrese la prioridad para el archivo que acaba de adjuntar:");
                        this.archivosPrioridad.add(this.contadordeArchivos+" "+input);
                        }
                        if(((String)this.comboPlanificación.getSelectedItem()).equals("SJF (Tiempo más corto, primero en ser atendido) No expropiativo")||((String)this.comboPlanificación.getSelectedItem()).equals("RR (Cada proceso será atendido por un lapso de tiempo y se irá a la cola)")){
                        int tiempo = 0;
                        FileReader fr2 = new FileReader (archivo); //creo un nuevo lector de documento
                        BufferedReader br2 = new BufferedReader(fr2); //creo nuevo extractor de texto
                        String linea2 = "";
                        while(((linea2 = br2.readLine())!=null)){
                        if(linea2.startsWith("nueva")||linea2.startsWith("etiqueta")||linea2.startsWith("retorne")){
                            Random random = new Random();
                            int numeroAleatorio = random.nextInt(9) + 1;
                            tiempo+=numeroAleatorio;
                        }
                        else{
                            tiempo+=1;
                        }
                        }
                        this.archivosTiempo.add(this.contadordeArchivos+" "+tiempo);
                            System.out.println("El archivo adjuntado se demora"+tiempo);
                        }
                        if(((String)this.comboPlanificación.getSelectedItem()).equals("SJF (Tiempo más corto, primero en ser atendido) Expropiativo")||((String)this.comboPlanificación.getSelectedItem()).equals("Planificación por prioridad (Seleccionar número de prioridad) Expropiativo UNIX")){
                            int tiempo1 = 0;
                            FileReader fr3 = new FileReader(archivo);
                            BufferedReader br3 = new BufferedReader(fr3);
                            String linea3 = "";
                            while(((linea3 = br3.readLine())!=null)){
                                if(linea3.startsWith("nueva")||linea3.startsWith("etiqueta")||linea3.startsWith("retorne")){
                                    Random random = new Random();
                                    int numeroAleatorio = random.nextInt(9) + 1;
                                    tiempo1+=numeroAleatorio;
                                }
                                else{
                                    tiempo1+=1;
                                }
                                    }
                            this.archivosTiempo.add(this.contadordeArchivos+" "+tiempo1);
                            System.out.println("El archivo adjuntado se demora"+tiempo1);
                            OrganizarAlgoritmoDePlanificacion();
                        }
                        
                }
                else{
                    JOptionPane.showMessageDialog(this, "El archivo tiene errores sintácticos y no puede ser ejecutado");
                }
                comboPlanificación.setEnabled(false);
                this.spinQuantum.setEnabled(false);
                this.spinMemoriaKernel.setEnabled(false);
                this.btnEjecutararchivos.setEnabled(true);
            } catch (Exception e) {
                if((e.toString()).equals("java.lang.NullPointerException")){
                    JOptionPane.showMessageDialog(null, "No ha seleccionado ningún archivo");
                }
                else{
                    JOptionPane.showMessageDialog(null, "No se pudo leer el archivo");
                    System.out.println("Error: "+e);
                }
            }   
        }
        else{
            JOptionPane.showMessageDialog(this, "Seleccione un Algoritmo de planificación o modo de ejecución", "Error de ejecución", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnseleccionararchivoActionPerformed

    private void btnAceptarespaciomemoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarespaciomemoriaActionPerformed

        if(this.spinMemoriaKernel.isEnabled()){
            OrganizarEspacioMemoria();
        }
        else{
            ActualizarEspacioMemoria();
        }
    }//GEN-LAST:event_btnAceptarespaciomemoriaActionPerformed

    // Método para detener el bucle
    private void detenerBucle() {
        isRunning.set(false);
    }

    // Método para reanudar el bucle
    private void reanudarBucle() {
        isRunning.set(true);
        try {
             // Reinicia el timer si es necesario
            if (!timer.isRunning()) {
            timer.start();
        }
        } catch (Exception e) {
            
        }

    }
    private void btnEjecutararchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutararchivosActionPerformed
        if(((String)this.comboPlanificación.getSelectedItem()).equals("SJF (Tiempo más corto, primero en ser atendido) Expropiativo")){
        OrganizarAlgoritmoDePlanificacion();
               LinkedList<String> lineasprioritarias = new LinkedList<>();
               for(String linea:this.lineasejecutar){
                   String[] lineaporpartes = linea.trim().split("\\s");
                   String[] tiempo = this.archivosTiempo.get(0).trim().split("\\s");
                   if(lineaporpartes[2].equals(tiempo[0])){
                       lineasprioritarias.add(linea);
                   }
               }
                 expropiar(evt, lineasprioritarias);
        }
        OrganizarAlgoritmoDePlanificacion();
        if (timer != null && timer.isRunning()) {
            timer.stop();
        }  
            LinkedList<String> lineas = this.lineasejecutar;
            this.lblModo.setText("MODO USUARIO");

            // Inicializa el timer con un intervalo de 1000 milisegundos (1 segundo)
            timer = new Timer(500, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (currentIndex < lineas.size()&&isRunning.get()) {
                        String linea = lineas.get(currentIndex);
                        String[] palabras = linea.trim().split("\\s+");
                        palabras = Arrays.stream(palabras)
                                .map(String::trim)
                                .filter(palabra -> !palabra.isEmpty())
                                .toArray(String[]::new);

                        // Inicializa una variable para almacenar la instrucción
                        StringBuilder instruccion = new StringBuilder();

                        // Comienza desde palabras[3] hasta el final
                        for (int i = 3; i < palabras.length; i++) {
                            instruccion.append(palabras[i]);
                            // Agrega un espacio si no es la última palabra
                            if (i < palabras.length - 1) {
                                instruccion.append(" ");
                            }
                        }

                        // Establece el texto en txInstruccionejecutada
                        if(!palabras[3].startsWith("//")){
                            txInstruccionejecutada.setText(palabras[0] + ">" + instruccion.toString());
                        }
                        lblArchivoejecutando.setText(palabras[1]);

                        currentIndex++; // Avanza al siguiente índice
                        // Divide la variable instruccion en palabras por espacios
                        String[] palabrasInstruccion = instruccion.toString().split("\\s+");
                        switch(palabrasInstruccion[0].toLowerCase()){
                            case "cargue":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        StringBuilder instruccionC = new StringBuilder();
                                        // Comienza desde palabras[3] hasta el final
                                        for (int i = 2; i < variableMemoria.length; i++) {
                                            instruccionC.append(variableMemoria[i]);
                                            // Agrega un espacio si no es la última palabra
                                            if (i < palabras.length - 1) {
                                                instruccionC.append(" ");
                                            }
                                        }
                                        tablaEspacioMemoria.setValueAt(instruccionC, 0, 1);
                                        txtAcumulador.setText(instruccionC.toString());
                                    }
                                }
                                break;
                            case "almacene":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[1]+" : "+tablaEspacioMemoria.getValueAt(0, 1), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "sume":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double suma = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               +Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(suma , 0, 1);
                                        txtAcumulador.setText(""+suma);
                                    }
                                }
                                break;
                            case "reste":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double resta = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               -Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(resta , 0, 1);
                                        txtAcumulador.setText(""+resta);
                                    }
                                }
                                break;
                            case "multiplique":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double multiplicacion = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               *Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(multiplicacion , 0, 1);
                                        txtAcumulador.setText(""+multiplicacion);
                                    }
                                }
                                break;
                            case "divida":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        if(Double.parseDouble(variableMemoria[2])!=0.0){
                                        double division = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               /Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(division , 0, 1);
                                        txtAcumulador.setText(""+division);
                                        }
                                        else{
                                            int opcion = JOptionPane.showOptionDialog(null, "El dividendo es 0 ¿Desea continuar con dividendo 1 o parar?", "Confirmar",
                                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] { "Continuar con dividendo 1", "Parar" }, "Continuar");
                                           if (opcion == JOptionPane.YES_OPTION) {

                                            } else if (opcion == JOptionPane.NO_OPTION) {
                                                System.out.println("Parar");
                                                timer.stop();
                                                currentIndex = 0;
                                            } else {
                                                JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna opción, la ejecución se detendrá");
                                            }
                                        }
                                    }
                                }
                                break;
                            case "potencia":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double potencia = Math.pow(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               ,Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(potencia , 0, 1);
                                        txtAcumulador.setText(""+potencia);
                                    }
                                }
                                break;
                            case "modulo":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double modulo = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                              %Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(modulo , 0, 1);
                                        txtAcumulador.setText(""+modulo);
                                    }
                                }
                                break;
                            case "concatene":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        StringBuilder instruccionC = new StringBuilder();
                                        // Comienza desde palabras[3] hasta el final
                                        for (int i = 2; i < variableMemoria.length; i++) {
                                            instruccionC.append(variableMemoria[i]);
                                            // Agrega un espacio si no es la última palabra
                                            if (i < palabras.length - 1) {
                                                instruccionC.append(" ");
                                            }
                                        }
                                        String nuevaCadena = (tablaEspacioMemoria.getValueAt(0, 1).toString())
                                              +(instruccionC);
                                        tablaEspacioMemoria.setValueAt(nuevaCadena , 0, 1);
                                        txtAcumulador.setText(""+nuevaCadena);
                                    }
                                }
                                break;
                            case "elimine":
                                        String nuevaCadena = (tablaEspacioMemoria.getValueAt(0, 1).toString());
                                        nuevaCadena = nuevaCadena.replace(palabrasInstruccion[1], "");
                                        tablaEspacioMemoria.setValueAt(nuevaCadena , 0, 1);
                                        txtAcumulador.setText(nuevaCadena);
                                break;
                            case "extraiga":
                                        String extraido = (tablaEspacioMemoria.getValueAt(0, 1).toString());
                                        if(Integer.parseInt(palabrasInstruccion[1])<=extraido.length()){
                                            extraido = extraido.substring(0,Integer.parseInt(palabrasInstruccion[1]));
                                            tablaEspacioMemoria.setValueAt(extraido , 0, 1);
                                            txtAcumulador.setText(extraido);
                                            }
                                        else{
                                            JOptionPane.showMessageDialog(null, "El valor de extracción es mayor"
                                                    + " que la cantidad de carácteres del acumulador\n La cadena sigue igual");
                                        }
                                        break;
                            case "y":
                                int operando1Y = 0;
                                int operando2Y = 0;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando1Y = Integer.parseInt(variableMemoria[2]);
                                    }
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[2])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando2Y = Integer.parseInt(variableMemoria[2]);
                                    }
                                }
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[3])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[3]+" : "+(operando1Y*operando2Y), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "o":
                                int operando1O = 0;
                                int operando2O = 0;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando1O = Integer.parseInt(variableMemoria[2]);
                                    }
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[2])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando2O = Integer.parseInt(variableMemoria[2]);
                                    }
                                }
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[3])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[3]+" : "+(operando1O+operando2O), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "no":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        int operandoNO = Integer.parseInt(variableMemoria[2]);
                                        if(operandoNO == 1){
                                            operandoNO = 0;
                                        }
                                        else{
                                            operandoNO = 1;
                                        }
                                        for(String variableConIdentificadores2:variablesConNombreeIdentificadorArchivo){
                                            String[] partesVariable2 = variableConIdentificadores2.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesVariable2[1]) && partesVariable2[2].equals(palabrasInstruccion[2])){
                                                int posicionVariable = Integer.parseInt(partesVariable2[0]);
                                                tablaEspacioMemoria.setValueAt(palabrasInstruccion[2]+" : "+(operandoNO), posicionVariable, 1);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "lea":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String input = JOptionPane.showInputDialog("Por favor, ingrese un número:");
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableEnMemoriaPorPartes = variableEnMemoria.trim().split("\\s+");
                                        variableEnMemoriaPorPartes[2] = input;
                                        String nuevoTexto = variableEnMemoriaPorPartes[0]+" "+variableEnMemoriaPorPartes[1]+" "+input;
                                        tablaEspacioMemoria.setValueAt(nuevoTexto, Integer.parseInt(partesVariable[0]), 1);
                                    }
                                }
                                break;    
                            case "muestre":
                                boolean mostro = false;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": "+variableEnMemoria+"\n";
                                        txPantalla.setText(textoPantalla);
                                        mostro = true;
                                    }
                                }
                                    if(palabrasInstruccion[1].equalsIgnoreCase("acumulador")){
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": ACUMULADOR = "+
                                        tablaEspacioMemoria.getValueAt(0, 1).toString()+"\n";
                                        txPantalla.setText(textoPantalla);
                                        mostro = true;
                                    }
                                    if(mostro!=true){
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += palabrasInstruccion[1]+"\n";
                                        txPantalla.setText(textoPantalla);
                                    }

                                break;
                            case "imprima":
                                boolean mostro2 = false;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String textoPantalla = txImpresora.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": "+variableEnMemoria+"\n";
                                        txImpresora.setText(textoPantalla);
                                        mostro = true;
                                    }
                                }
                                    if(palabrasInstruccion[1].equalsIgnoreCase("acumulador")){
                                        String textoImpresora = txImpresora.getText();
                                        textoImpresora += "archivo 000"+palabras[2]+": ACUMULADOR = "+
                                        tablaEspacioMemoria.getValueAt(0, 1).toString()+"\n";
                                        txImpresora.setText(textoImpresora);
                                        mostro = true;
                                    }
                                    if(mostro2!=true){
                                        String textoImpresora = txImpresora.getText();
                                        textoImpresora += palabrasInstruccion[1]+"\n";
                                        txImpresora.setText(textoImpresora);
                                    }

                                break;
                            case "retorne":
                                String texto = txPantalla.getText();
                                texto += "Termino el programa llamado "+palabras[1]+" con identificador 000"+palabras[2]+"\n";
                                txPantalla.setText(texto);
                                break;
                            case "vaya":    
                                    for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                        String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                        if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[1])){
                                            int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                            int contador = 0;
                                            int posicionDefinitiva = 0;
                                            int contadorlineascomentadas = 0;
                                            for(String i:lineasejecutar){
                                                String[] instruccionPartida = i.split("\\s+");
                                                System.out.println(instruccionPartida[0]+"es diferente de "+posicionEtiqueta);
                                                if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                    posicionDefinitiva = contador;
                                                }
                                                else{
                                                        contador++;
                                                }
                                            }
                                            currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                        }
                                    }
                                break;
                            case "vayasi":    
                                    if(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())>0.0){
                                        for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                            String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[1])){
                                                int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                                int contador = 0;
                                                int contadorlineascomentadas = 0;
                                                int posicionDefinitiva = 0;
                                                for(String i:lineasejecutar){
                                                    String[] instruccionPartida = i.split("\\s+");
                                                    if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                        posicionDefinitiva = contador;
                                                    }
                                                    else{
                                                        contador++;
                                                    }
                                                }
                                                System.out.println(currentIndex+"-"+(currentIndex)+"-"+posicionDefinitiva);
                                                currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                            }
                                        }
                                    }
                                    if(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())<0){
                                        for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                            String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[2])){
                                                int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                                int contador = 0;
                                                int posicionDefinitiva = 0;
                                                int contadorlineascomentadas = 0;
                                                for(String i:lineasejecutar){
                                                    String[] instruccionPartida = i.split("\\s+");
                                                    System.out.println(instruccionPartida[0]+"es diferente de "+posicionEtiqueta);
                                                    if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                        posicionDefinitiva = contador;
                                                    }
                                                    else{
                                                        contador++;
                                                        }
                                                    }
                                                currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                            }
                                        }
                                    }
                                break;
                            case "dinosaurio":
                                    DinosaurAnimation dinosaurAnimation = new DinosaurAnimation();
                                    break;
                        }
                        if(modoPasoAPaso){
                            int respuesta = JOptionPane.showConfirmDialog(null, "¿Continuar con modo paso a paso?","Modo paso a paso",JOptionPane.YES_NO_OPTION);
                            if(respuesta == JOptionPane.NO_OPTION){
                                modoPasoAPaso = false;
                            }
                        }
                    }
                    else{
                        lblModo.setText("MODO KERNEL");
                       timer.stop();
                    }
                }
            });

            // Inicia el timer
            timer.start();
        

    }//GEN-LAST:event_btnEjecutararchivosActionPerformed
    
    private void expropiar(java.awt.event.ActionEvent evt, LinkedList<String> lineasejecutar) {                                                    
        OrganizarAlgoritmoDePlanificacion(); 
            LinkedList<String> lineas = lineasejecutar;
            this.lblModo.setText("MODO USUARIO");

            // Inicializa el timer con un intervalo de 1000 milisegundos (1 segundo)
            timer1 = new Timer(500, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (currentIndex1 < lineas.size()&&isRunning.get()) {
                        String linea = lineas.get(currentIndex1);
                        String[] palabras = linea.trim().split("\\s+");
                        palabras = Arrays.stream(palabras)
                                .map(String::trim)
                                .filter(palabra -> !palabra.isEmpty())
                                .toArray(String[]::new);

                        // Inicializa una variable para almacenar la instrucción
                        StringBuilder instruccion = new StringBuilder();

                        // Comienza desde palabras[3] hasta el final
                        for (int i = 3; i < palabras.length; i++) {
                            instruccion.append(palabras[i]);
                            // Agrega un espacio si no es la última palabra
                            if (i < palabras.length - 1) {
                                instruccion.append(" ");
                            }
                        }

                        // Establece el texto en txInstruccionejecutada
                        if(!palabras[3].startsWith("//")){
                            txInstruccionejecutada.setText(palabras[0] + ">" + instruccion.toString());
                        }
                        lblArchivoejecutando.setText(palabras[1]);

                        currentIndex1++; // Avanza al siguiente índice
                        // Divide la variable instruccion en palabras por espacios
                        String[] palabrasInstruccion = instruccion.toString().split("\\s+");
                        switch(palabrasInstruccion[0].toLowerCase()){
                            case "cargue":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        StringBuilder instruccionC = new StringBuilder();
                                        // Comienza desde palabras[3] hasta el final
                                        for (int i = 2; i < variableMemoria.length; i++) {
                                            instruccionC.append(variableMemoria[i]);
                                            // Agrega un espacio si no es la última palabra
                                            if (i < palabras.length - 1) {
                                                instruccionC.append(" ");
                                            }
                                        }
                                        tablaEspacioMemoria.setValueAt(instruccionC, 0, 1);
                                        txtAcumulador.setText(instruccionC.toString());
                                    }
                                }
                                break;
                            case "almacene":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[1]+" : "+tablaEspacioMemoria.getValueAt(0, 1), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "sume":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double suma = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               +Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(suma , 0, 1);
                                        txtAcumulador.setText(""+suma);
                                    }
                                }
                                break;
                            case "reste":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double resta = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               -Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(resta , 0, 1);
                                        txtAcumulador.setText(""+resta);
                                    }
                                }
                                break;
                            case "multiplique":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double multiplicacion = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               *Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(multiplicacion , 0, 1);
                                        txtAcumulador.setText(""+multiplicacion);
                                    }
                                }
                                break;
                            case "divida":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        if(Double.parseDouble(variableMemoria[2])!=0.0){
                                        double division = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               /Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(division , 0, 1);
                                        txtAcumulador.setText(""+division);
                                        }
                                        else{
                                            int opcion = JOptionPane.showOptionDialog(null, "El dividendo es 0 ¿Desea continuar con dividendo 1 o parar?", "Confirmar",
                                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new String[] { "Continuar con dividendo 1", "Parar" }, "Continuar");
                                           if (opcion == JOptionPane.YES_OPTION) {

                                            } else if (opcion == JOptionPane.NO_OPTION) {
                                                System.out.println("Parar");
                                                timer.stop();
                                                currentIndex = 0;
                                            } else {
                                                JOptionPane.showMessageDialog(null, "No ha seleccionado ninguna opción, la ejecución se detendrá");
                                            }
                                        }
                                    }
                                }
                                break;
                            case "potencia":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double potencia = Math.pow(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                               ,Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(potencia , 0, 1);
                                        txtAcumulador.setText(""+potencia);
                                    }
                                }
                                break;
                            case "modulo":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        double modulo = (Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())
                                              %Double.parseDouble(variableMemoria[2]));
                                        tablaEspacioMemoria.setValueAt(modulo , 0, 1);
                                        txtAcumulador.setText(""+modulo);
                                    }
                                }
                                break;
                            case "concatene":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        StringBuilder instruccionC = new StringBuilder();
                                        // Comienza desde palabras[3] hasta el final
                                        for (int i = 2; i < variableMemoria.length; i++) {
                                            instruccionC.append(variableMemoria[i]);
                                            // Agrega un espacio si no es la última palabra
                                            if (i < palabras.length - 1) {
                                                instruccionC.append(" ");
                                            }
                                        }
                                        String nuevaCadena = (tablaEspacioMemoria.getValueAt(0, 1).toString())
                                              +(instruccionC);
                                        tablaEspacioMemoria.setValueAt(nuevaCadena , 0, 1);
                                        txtAcumulador.setText(""+nuevaCadena);
                                    }
                                }
                                break;
                            case "elimine":
                                        String nuevaCadena = (tablaEspacioMemoria.getValueAt(0, 1).toString());
                                        nuevaCadena = nuevaCadena.replace(palabrasInstruccion[1], "");
                                        tablaEspacioMemoria.setValueAt(nuevaCadena , 0, 1);
                                        txtAcumulador.setText(nuevaCadena);
                                break;
                            case "extraiga":
                                        String extraido = (tablaEspacioMemoria.getValueAt(0, 1).toString());
                                        if(Integer.parseInt(palabrasInstruccion[1])<=extraido.length()){
                                            extraido = extraido.substring(0,Integer.parseInt(palabrasInstruccion[1]));
                                            tablaEspacioMemoria.setValueAt(extraido , 0, 1);
                                            txtAcumulador.setText(extraido);
                                            }
                                        else{
                                            JOptionPane.showMessageDialog(null, "El valor de extracción es mayor"
                                                    + " que la cantidad de carácteres del acumulador\n La cadena sigue igual");
                                        }
                                        break;
                            case "y":
                                int operando1Y = 0;
                                int operando2Y = 0;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando1Y = Integer.parseInt(variableMemoria[2]);
                                    }
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[2])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando2Y = Integer.parseInt(variableMemoria[2]);
                                    }
                                }
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[3])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[3]+" : "+(operando1Y*operando2Y), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "o":
                                int operando1O = 0;
                                int operando2O = 0;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando1O = Integer.parseInt(variableMemoria[2]);
                                    }
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[2])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        operando2O = Integer.parseInt(variableMemoria[2]);
                                    }
                                }
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[3])){
                                        int posicionVariable = Integer.parseInt(partesVariable[0]);
                                        tablaEspacioMemoria.setValueAt(palabrasInstruccion[3]+" : "+(operando1O+operando2O), posicionVariable, 1);
                                    }
                                }
                                break;
                            case "no":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableMemoria = variableEnMemoria.split("\\s+");
                                        int operandoNO = Integer.parseInt(variableMemoria[2]);
                                        if(operandoNO == 1){
                                            operandoNO = 0;
                                        }
                                        else{
                                            operandoNO = 1;
                                        }
                                        for(String variableConIdentificadores2:variablesConNombreeIdentificadorArchivo){
                                            String[] partesVariable2 = variableConIdentificadores2.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesVariable2[1]) && partesVariable2[2].equals(palabrasInstruccion[2])){
                                                int posicionVariable = Integer.parseInt(partesVariable2[0]);
                                                tablaEspacioMemoria.setValueAt(palabrasInstruccion[2]+" : "+(operandoNO), posicionVariable, 1);
                                            }
                                        }
                                    }
                                }
                                break;
                            case "lea":
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String input = JOptionPane.showInputDialog("Por favor, ingrese un número:");
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String[] variableEnMemoriaPorPartes = variableEnMemoria.trim().split("\\s+");
                                        variableEnMemoriaPorPartes[2] = input;
                                        String nuevoTexto = variableEnMemoriaPorPartes[0]+" "+variableEnMemoriaPorPartes[1]+" "+input;
                                        tablaEspacioMemoria.setValueAt(nuevoTexto, Integer.parseInt(partesVariable[0]), 1);
                                    }
                                }
                                break;    
                            case "muestre":
                                boolean mostro = false;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": "+variableEnMemoria+"\n";
                                        txPantalla.setText(textoPantalla);
                                        mostro = true;
                                    }
                                }
                                    if(palabrasInstruccion[1].equalsIgnoreCase("acumulador")){
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": ACUMULADOR = "+
                                        tablaEspacioMemoria.getValueAt(0, 1).toString()+"\n";
                                        txPantalla.setText(textoPantalla);
                                        mostro = true;
                                    }
                                    if(mostro!=true){
                                        String textoPantalla = txPantalla.getText();
                                        textoPantalla += palabrasInstruccion[1]+"\n";
                                        txPantalla.setText(textoPantalla);
                                    }

                                break;
                            case "imprima":
                                boolean mostro2 = false;
                                for(String variableConIdentificadores:variablesConNombreeIdentificadorArchivo){
                                    String[] partesVariable = variableConIdentificadores.trim().split("\\s+");
                                    if(("000"+palabras[2]).equals(partesVariable[1]) && partesVariable[2].equals(palabrasInstruccion[1])){
                                        String variableEnMemoria = (String)tablaEspacioMemoria.getValueAt(Integer.parseInt(partesVariable[0]), 1);
                                        String textoPantalla = txImpresora.getText();
                                        textoPantalla += "archivo 000"+palabras[2]+": "+variableEnMemoria+"\n";
                                        txImpresora.setText(textoPantalla);
                                        mostro = true;
                                    }
                                }
                                    if(palabrasInstruccion[1].equalsIgnoreCase("acumulador")){
                                        String textoImpresora = txImpresora.getText();
                                        textoImpresora += "archivo 000"+palabras[2]+": ACUMULADOR = "+
                                        tablaEspacioMemoria.getValueAt(0, 1).toString()+"\n";
                                        txImpresora.setText(textoImpresora);
                                        mostro = true;
                                    }
                                    if(mostro2!=true){
                                        String textoImpresora = txImpresora.getText();
                                        textoImpresora += palabrasInstruccion[1]+"\n";
                                        txImpresora.setText(textoImpresora);
                                    }

                                break;
                            case "retorne":
                                String texto = txPantalla.getText();
                                texto += "Termino el programa llamado "+palabras[1]+" con identificador 000"+palabras[2]+"\n";
                                txPantalla.setText(texto);
                                break;
                            case "vaya":    
                                    for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                        String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                        if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[1])){
                                            int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                            int contador = 0;
                                            int posicionDefinitiva = 0;
                                            int contadorlineascomentadas = 0;
                                            for(String i:lineasejecutar){
                                                String[] instruccionPartida = i.split("\\s+");
                                                if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                    posicionDefinitiva = contador;
                                                }
                                                else{
                                                        contador++;
                                                }
                                            }
                                            currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                        }
                                    }
                                break;
                            case "vayasi":    
                                    if(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())>0.0){
                                        for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                            String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[1])){
                                                int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                                int contador = 0;
                                                int contadorlineascomentadas = 0;
                                                int posicionDefinitiva = 0;
                                                for(String i:lineasejecutar){
                                                    String[] instruccionPartida = i.split("\\s+");
                                                    if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                        posicionDefinitiva = contador;
                                                    }
                                                    else{
                                                        contador++;
                                                    }
                                                }
                                                currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                            }
                                        }
                                    }
                                    if(Double.parseDouble(tablaEspacioMemoria.getValueAt(0, 1).toString())<0){
                                        for(String etiquetaConIdentificadores:etiquetasconNombreeIdentificadorArchivo){
                                            String[] partesEtiqueta = etiquetaConIdentificadores.trim().split("\\s+");
                                            if(("000"+palabras[2]).equals(partesEtiqueta[1]) && partesEtiqueta[2].equals(palabrasInstruccion[2])){
                                                int posicionEtiqueta = Integer.parseInt(partesEtiqueta[0]);
                                                int contador = 0;
                                                int posicionDefinitiva = 0;
                                                int contadorlineascomentadas = 0;
                                                for(String i:lineasejecutar){
                                                    String[] instruccionPartida = i.split("\\s+");
                                                    if(instruccionPartida[0].equals("00"+(posicionEtiqueta-contadorlineascomentadas))){
                                                        posicionDefinitiva = contador;
                                                    }
                                                    else{
                                                        contador++;
                                                        }
                                                    }
                                                currentIndex = currentIndex-(currentIndex-posicionDefinitiva);
                                            }
                                        }
                                    }
                                break;
                            case "dinosaurio":
                                    DinosaurAnimation dinosaurAnimation = new DinosaurAnimation();
                                    break;
                        }
                        if(modoPasoAPaso){
                            int respuesta = JOptionPane.showConfirmDialog(null, "¿Continuar con modo paso a paso?","Modo paso a paso",JOptionPane.YES_NO_OPTION);
                            if(respuesta == JOptionPane.NO_OPTION){
                                modoPasoAPaso = false;
                            }
                        }
                    }
                    else{
                        lblModo.setText("MODO KERNEL");
                       timer1.stop();
                    }
                }
            });
            timer1.start();
            // Inicia el timer
            if(timer!=null){
              timer.start();
            }
        

    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void txtAcumuladorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAcumuladorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAcumuladorActionPerformed

    private void btnPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPausarActionPerformed
        detenerBucle();
        lblPausa.setText("PAUSA");
        JOptionPane.showMessageDialog(this, "¿Continuar?");
        lblPausa.setText("");
        reanudarBucle();
    }//GEN-LAST:event_btnPausarActionPerformed

    private void btnPasoaPasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasoaPasoActionPerformed
        modoPasoAPaso = true;
    }//GEN-LAST:event_btnPasoaPasoActionPerformed

    private void btnCrearArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearArchivoActionPerformed
       JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo CH");
    fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos CH (*.ch)", "ch"));

    int userSelection = fileChooser.showSaveDialog(this); // "this" hace referencia al JFrame actual

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        if (!fileToSave.getAbsolutePath().endsWith(".ch")) {
            fileToSave = new File(fileToSave.getAbsolutePath() + ".ch");
        }

        JTextArea textArea = new JTextArea();
        textArea.setWrapStyleWord(true);
        textArea.setLineWrap(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 300));

        int result = JOptionPane.showConfirmDialog(this, scrollPane, "Por favor, ingresa el texto para el archivo CH:",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try (PrintWriter writer = new PrintWriter(fileToSave)) {
                // Escribe el texto en el archivo
                writer.println(textArea.getText());
                JOptionPane.showMessageDialog(this, "Archivo CH creado exitosamente.");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al crear el archivo CH.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ingresó ningún texto. El archivo no ha sido creado.");
        }
    }

    }//GEN-LAST:event_btnCrearArchivoActionPerformed

    private void btnEditarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarArchivoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Selecciona un archivo CH para editar");
    fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos CH (*.ch)", "ch"));

    int userSelection = fileChooser.showOpenDialog(this); // "this" hace referencia al JFrame actual

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToEdit = fileChooser.getSelectedFile();
        try (BufferedReader reader = new BufferedReader(new FileReader(fileToEdit))) {
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }

            JTextArea textArea = new JTextArea(content.toString());
            textArea.setWrapStyleWord(true);
            textArea.setLineWrap(true);
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(400, 300));

            int result = JOptionPane.showConfirmDialog(this, scrollPane, "Edita el archivo CH:",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                try (PrintWriter writer = new PrintWriter(fileToEdit)) {
                    // Escribe el nuevo contenido en el archivo
                    writer.println(textArea.getText());
                    JOptionPane.showMessageDialog(this, "Archivo CH editado exitosamente.");
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al editar el archivo CH.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se realizaron cambios en el archivo.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo CH.");
        }
    }
    }//GEN-LAST:event_btnEditarArchivoActionPerformed

    private void comboPlanificaciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPlanificaciónActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPlanificaciónActionPerformed

    public void OrganizarEspacioMemoria(){
        int numeroFilas = (int)this.spinEspacioMemoria.getValue(); //obtengo el espacio de memoria seleccionado
        int memoriaKernel = (int)this.spinMemoriaKernel.getValue(); //obtengo el espacio Kernel seleccionado
        if(numeroFilas==0){ //si el número de filas es igual a 0 (valor al iniciar el programa)
            numeroFilas = 500; //Configuro el valor predeterminado de la memoria
        }
        if(memoriaKernel==0){ //si el número de espacio en memoria Kernel es igual a 0 (valor al iniciar el programa)
            memoriaKernel = 17; //Configuro el valor predeterminado de la memoria Kernel
        }
        int[] memoria = new int[numeroFilas-1];  
        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("Numero");    
        modeloTabla.addColumn("Contenido");
        int contador = 0;
        modeloTabla.addRow(new Object[]{"000","ACUMULADOR"});
        for (int i:memoria) {
            memoria[contador] = contador;
            if(contador<memoriaKernel){
                modeloTabla.addRow(new Object[]{"00"+(contador+1),"Kernel"});
            }
            else{
                modeloTabla.addRow(new Object[]{"00"+(contador+1)});
            }
            
            contador++;
        }
        
        this.tablaEspacioMemoria.setModel(modeloTabla);
       
    }
    public void ActualizarEspacioMemoria(){
        int memoriaKernel = (int)this.spinMemoriaKernel.getValue(); //obtengo el espacio Kernel seleccionado
        int nuevoespacioMemoria = (int)this.spinEspacioMemoria.getValue();
        DefaultTableModel miModeloTabla = (DefaultTableModel)this.tablaEspacioMemoria.getModel();
        int contador = 0;
        if(nuevoespacioMemoria>miModeloTabla.getRowCount()){
        for (int i = miModeloTabla.getRowCount(); i < nuevoespacioMemoria+1; i++) {
            miModeloTabla.addRow(new Object[]{"00"+(miModeloTabla.getRowCount())});
        }
        }
        else{
            while (contador < miModeloTabla.getRowCount() && miModeloTabla.getValueAt(contador, 1) != null) {
            contador++;
            }
            for (int i = miModeloTabla.getRowCount() - 1; i >= nuevoespacioMemoria; i--) {
            if (miModeloTabla.getValueAt(i, 1) == null) {
                miModeloTabla.removeRow(i);
            }
            else{
                JOptionPane.showMessageDialog(this, "El espacio de memoria seleccionado es menor que el usado");
                break;
            }
            }
        }
        this.tablaEspacioMemoria.setModel(miModeloTabla);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SistemaOperativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SistemaOperativo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Instrucciones;
    private javax.swing.JButton btnAceptarespaciomemoria;
    private javax.swing.JButton btnCrearArchivo;
    private javax.swing.JButton btnEditarArchivo;
    private javax.swing.JButton btnEjecutararchivos;
    private javax.swing.JButton btnPasoaPaso;
    private javax.swing.JButton btnPausar;
    private javax.swing.JButton btnseleccionararchivo;
    private javax.swing.JComboBox<String> comboPlanificación;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblArchivoejecutando;
    private javax.swing.JLabel lblModo;
    private javax.swing.JLabel lblPausa;
    private javax.swing.JLabel lblPausa2;
    private javax.swing.JSpinner spinEspacioMemoria;
    private javax.swing.JSpinner spinMemoriaKernel;
    private javax.swing.JSpinner spinQuantum;
    private javax.swing.JTable tablaEspacioMemoria;
    private javax.swing.JTextArea txArchivo;
    private javax.swing.JTextArea txArchivos;
    private javax.swing.JTextArea txErrores;
    private javax.swing.JTextArea txImpresora;
    private javax.swing.JTextField txInstruccionejecutada;
    private javax.swing.JTextArea txPantalla;
    private javax.swing.JTextArea txVariables;
    private javax.swing.JTextArea txetiquetas;
    private javax.swing.JTextField txtAcumulador;
    // End of variables declaration//GEN-END:variables
}
